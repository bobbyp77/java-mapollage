/*
 * Copyright 2017 Patrik Karlsson.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package se.trixon.mapollage.ui.config;

import java.beans.PropertyChangeEvent;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.prefs.PreferenceChangeEvent;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import se.trixon.almond.util.Dict;
import se.trixon.almond.util.icons.material.MaterialIcon;
import se.trixon.mapollage.profile.Profile;
import se.trixon.mapollage.profile.ProfilePlacemark;

/**
 *
 * @author Patrik Karlsson
 */
public class ModulePlacemarkPanel extends ModulePanel {

    private boolean mInvalidDateFormat;
    private ProfilePlacemark mPlacemark = new ProfilePlacemark(mProfile);

    /**
     * Creates new form ModulePlacemarkPanel
     */
    public ModulePlacemarkPanel() {
        initComponents();
        mTitle = Dict.PLACEMARK.toString();
        init();
    }

    @Override
    public ImageIcon getIcon() {
        return MaterialIcon._Maps.PLACE.get(ICON_SIZE, getIconColor());
    }

    @Override
    public boolean hasValidSettings() {
        if (mInvalidDateFormat && mPlacemark.getNameBy() == 1) {
            invalidSettings(Dict.INVALID_DATE_PATTERN.toString());

            return false;
        }

        return true;
    }

    @Override
    public void onPreferenceChange(PreferenceChangeEvent evt) {
        previewDateFormat();
    }

    private void init() {
        DocumentListener documentListener = new DocumentListener() {
            @Override
            public void changedUpdate(DocumentEvent e) {
                previewDateFormat();
            }

            @Override
            public void insertUpdate(DocumentEvent e) {
                previewDateFormat();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                previewDateFormat();
            }
        };

        dateFormatComboBox.setModel(new DefaultComboBoxModel<>(mBundle.getString("dateFormats").split(";")));
        dateFormatComboBox.addPropertyChangeListener("UI", (PropertyChangeEvent evt) -> {
            getTextComponent(dateFormatComboBox).getDocument().addDocumentListener(documentListener);
        });

        getTextComponent(dateFormatComboBox).getDocument().addDocumentListener(documentListener);
    }

    private void previewDateFormat() {
        String datePreview;
        String datePattern = getComboInEditValue(dateFormatComboBox);
        dateFormatComboBox.setSelectedItem(datePattern);

        try {
            SimpleDateFormat simpleDateFormat = new SimpleDateFormat((String) dateFormatComboBox.getSelectedItem(), mOptions.getLocale());
            datePreview = simpleDateFormat.format(new Date(System.currentTimeMillis()));
            mInvalidDateFormat = false;
        } catch (IllegalArgumentException ex) {
            datePreview = Dict.Dialog.ERROR.toString();
            mInvalidDateFormat = true;
        }

        String dateLabel = String.format("%s (%s)", Dict.DATE_PATTERN.toString(), datePreview);
        nameByDateRadioButton.setText(dateLabel);
        mPlacemark.setDatePattern(datePattern);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        nameButtonGroup = new javax.swing.ButtonGroup();
        symbolButtonGroup = new javax.swing.ButtonGroup();
        jPanel2 = new javax.swing.JPanel();
        nameByLabel = new javax.swing.JLabel();
        nameByFileRadioButton = new javax.swing.JRadioButton();
        nameByDateRadioButton = new javax.swing.JRadioButton();
        dateFormatComboBox = new javax.swing.JComboBox<>();
        nameByNoRadioButton = new javax.swing.JRadioButton();
        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        symbolLabel = new javax.swing.JLabel();
        symbolPhotoRadioButton = new javax.swing.JRadioButton();
        symbolPinRadioButton = new javax.swing.JRadioButton();
        scaleLabel = new javax.swing.JLabel();
        scaleSpinner = new javax.swing.JSpinner();
        zoomLabel = new javax.swing.JLabel();
        zoomSpinner = new javax.swing.JSpinner();
        jPanel4 = new javax.swing.JPanel();

        setLayout(new java.awt.GridLayout(1, 0, 8, 0));

        jPanel2.setLayout(new java.awt.GridBagLayout());

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("se/trixon/mapollage/ui/config/Bundle"); // NOI18N
        nameByLabel.setText(bundle.getString("ModulePlacemarkPanel.nameByLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel2.add(nameByLabel, gridBagConstraints);

        nameButtonGroup.add(nameByFileRadioButton);
        nameByFileRadioButton.setText(Dict.FILENAME.toString());
        nameByFileRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameByFileRadioButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        jPanel2.add(nameByFileRadioButton, gridBagConstraints);

        nameButtonGroup.add(nameByDateRadioButton);
        nameByDateRadioButton.setText(Dict.DATE_PATTERN.toString());
        nameByDateRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameByDateRadioButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        jPanel2.add(nameByDateRadioButton, gridBagConstraints);

        dateFormatComboBox.setEditable(true);

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, nameByDateRadioButton, org.jdesktop.beansbinding.ELProperty.create("${selected}"), dateFormatComboBox, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        jPanel2.add(dateFormatComboBox, gridBagConstraints);

        nameButtonGroup.add(nameByNoRadioButton);
        nameByNoRadioButton.setText(bundle.getString("ModulePlacemarkPanel.nameByNoRadioButton.text")); // NOI18N
        nameByNoRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameByNoRadioButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        jPanel2.add(nameByNoRadioButton, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jPanel3, gridBagConstraints);

        add(jPanel2);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        symbolLabel.setText(Dict.SYMBOL.toString());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel1.add(symbolLabel, gridBagConstraints);

        symbolButtonGroup.add(symbolPhotoRadioButton);
        symbolPhotoRadioButton.setText(Dict.PHOTO.toString());
        symbolPhotoRadioButton.setToolTipText(bundle.getString("ModulePlacemarkPanel.symbolPhotoRadioButton.toolTipText")); // NOI18N
        symbolPhotoRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                symbolPhotoRadioButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        jPanel1.add(symbolPhotoRadioButton, gridBagConstraints);

        symbolButtonGroup.add(symbolPinRadioButton);
        symbolPinRadioButton.setText(Dict.PIN.toString());
        symbolPinRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                symbolPinRadioButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        jPanel1.add(symbolPinRadioButton, gridBagConstraints);

        scaleLabel.setText(Dict.SCALE.toString());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 0, 0, 0);
        jPanel1.add(scaleLabel, gridBagConstraints);

        scaleSpinner.setModel(new javax.swing.SpinnerNumberModel(0.5d, 0.5d, 10.0d, 0.1d));
        scaleSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                scaleSpinnerStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(scaleSpinner, gridBagConstraints);

        zoomLabel.setText(Dict.ZOOM.toString());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 0, 0, 0);
        jPanel1.add(zoomLabel, gridBagConstraints);

        zoomSpinner.setModel(new javax.swing.SpinnerNumberModel(2.0d, 1.5d, 10.0d, 0.1d));
        zoomSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                zoomSpinnerStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(zoomSpinner, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jPanel4, gridBagConstraints);

        add(jPanel1);

        bindingGroup.bind();
    }// </editor-fold>//GEN-END:initComponents

    private void nameByFileRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameByFileRadioButtonActionPerformed
        mPlacemark.setNameBy(ProfilePlacemark.NAME_BY_FILE);
    }//GEN-LAST:event_nameByFileRadioButtonActionPerformed

    private void nameByNoRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameByNoRadioButtonActionPerformed
        mPlacemark.setNameBy(ProfilePlacemark.NAME_BY_NONE);
    }//GEN-LAST:event_nameByNoRadioButtonActionPerformed

    private void nameByDateRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameByDateRadioButtonActionPerformed
        mPlacemark.setNameBy(ProfilePlacemark.NAME_BY_DATE);
    }//GEN-LAST:event_nameByDateRadioButtonActionPerformed

    private void scaleSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_scaleSpinnerStateChanged
        mPlacemark.setScale((Double) scaleSpinner.getModel().getValue());
    }//GEN-LAST:event_scaleSpinnerStateChanged

    private void zoomSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_zoomSpinnerStateChanged
        mPlacemark.setZoom((Double) zoomSpinner.getModel().getValue());
    }//GEN-LAST:event_zoomSpinnerStateChanged

    private void symbolPhotoRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_symbolPhotoRadioButtonActionPerformed
        mPlacemark.setSymbolAs(ProfilePlacemark.SYMBOL_AS_PHOTO);
    }//GEN-LAST:event_symbolPhotoRadioButtonActionPerformed

    private void symbolPinRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_symbolPinRadioButtonActionPerformed
        mPlacemark.setSymbolAs(ProfilePlacemark.SYMBOL_AS_PIN);
    }//GEN-LAST:event_symbolPinRadioButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> dateFormatComboBox;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.ButtonGroup nameButtonGroup;
    private javax.swing.JRadioButton nameByDateRadioButton;
    private javax.swing.JRadioButton nameByFileRadioButton;
    private javax.swing.JLabel nameByLabel;
    private javax.swing.JRadioButton nameByNoRadioButton;
    private javax.swing.JLabel scaleLabel;
    private javax.swing.JSpinner scaleSpinner;
    private javax.swing.ButtonGroup symbolButtonGroup;
    private javax.swing.JLabel symbolLabel;
    private javax.swing.JRadioButton symbolPhotoRadioButton;
    private javax.swing.JRadioButton symbolPinRadioButton;
    private javax.swing.JLabel zoomLabel;
    private javax.swing.JSpinner zoomSpinner;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    @Override
    public void load(Profile profile) {
        mProfile = profile;
        mPlacemark = mProfile.getPlacemark();

        dateFormatComboBox.setSelectedItem(mPlacemark.getDatePattern());

        switch (mPlacemark.getNameBy()) {
            case ProfilePlacemark.NAME_BY_FILE:
                nameByFileRadioButton.setSelected(true);
                nameByFileRadioButtonActionPerformed(null);
                break;

            case ProfilePlacemark.NAME_BY_DATE:
                nameByDateRadioButton.setSelected(true);
                nameByDateRadioButtonActionPerformed(null);
                break;

            case ProfilePlacemark.NAME_BY_NONE:
                nameByNoRadioButton.setSelected(true);
                nameByNoRadioButtonActionPerformed(null);
                break;
        }

        switch (mPlacemark.getSymbolAs()) {
            case ProfilePlacemark.SYMBOL_AS_PHOTO:
                symbolPhotoRadioButton.setSelected(true);
                symbolPhotoRadioButtonActionPerformed(null);
                break;

            case ProfilePlacemark.SYMBOL_AS_PIN:
                symbolPinRadioButton.setSelected(true);
                symbolPinRadioButtonActionPerformed(null);
                break;
        }

        scaleSpinner.setValue(mPlacemark.getScale());
        zoomSpinner.setValue(mPlacemark.getZoom());
    }
}
