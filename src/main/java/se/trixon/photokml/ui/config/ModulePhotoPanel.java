/*
 * Copyright 2016 Patrik Karlsson.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package se.trixon.photokml.ui.config;

import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import se.trixon.almond.util.Dict;
import se.trixon.photokml.Profile;

/**
 *
 * @author Patrik Karlsson <patrik@trixon.se>
 */
public class ModulePhotoPanel extends ModulePanel {

    /**
     * Creates new form ModulePhotoPanel
     */
    public ModulePhotoPanel() {
        initComponents();
        mTitle = Dict.PHOTO.getString();
        init();
    }

    @Override
    public StringBuilder getHeaderBuilder() {
        StringBuilder sb = new StringBuilder();

        sb.append(Dict.PHOTO.getString().toUpperCase()).append("\n");

        optAppend(sb, maxWidthCheckBox.isSelected(), String.format("%s = %s", maxWidthCheckBox.getText(), mOptions.getPhotoBalloonMaxWidthValue()));
        optAppend(sb, maxHeightCheckBox.isSelected(), String.format("%s = %s", maxHeightCheckBox.getText(), mOptions.getPhotoBalloonMaxHeightValue()));
        optAppend(sb, lowerCaseExtCheckBox.isSelected(), lowerCaseExtCheckBox.getText());

        sb.append("\n");

        return sb;
    }

    @Override
    public boolean hasValidSettings() {
        return true;
    }

    @Override
    public void restoreEnabledStates() {
        maxHeightCheckBoxActionPerformed(null);
        maxWidthCheckBoxActionPerformed(null);
        urlTextField.setEnabled(urlCheckBox.isSelected());
    }

    private void init() {
        maxHeightNumericField.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void changedUpdate(DocumentEvent e) {
                saveOption();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                saveOption();
            }

            @Override
            public void insertUpdate(DocumentEvent e) {
                saveOption();
            }

            private void saveOption() {
                try {
                    mOptions.setPhotoBalloonMaxHeightValue(Integer.valueOf(maxHeightNumericField.getText().replace(",", ".")));
                } catch (NumberFormatException e) {
                }
            }
        });

        maxWidthNumericField.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void changedUpdate(DocumentEvent e) {
                saveOption();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                saveOption();
            }

            @Override
            public void insertUpdate(DocumentEvent e) {
                saveOption();
            }

            private void saveOption() {
                try {
                    mOptions.setPhotoBalloonMaxWidthValue(Integer.valueOf(maxWidthNumericField.getText().replace(",", ".")));
                } catch (NumberFormatException e) {
                }
            }
        });

        urlTextField.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void changedUpdate(DocumentEvent e) {
                saveOption();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                saveOption();
            }

            @Override
            public void insertUpdate(DocumentEvent e) {
                saveOption();
            }

            private void saveOption() {
                mOptions.setPhotoBaseUrlValue(urlTextField.getText());
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        maxWidthCheckBox = new javax.swing.JCheckBox();
        maxWidthNumericField = new se.trixon.almond.util.swing.ANumericField();
        maxHeightCheckBox = new javax.swing.JCheckBox();
        maxHeightNumericField = new se.trixon.almond.util.swing.ANumericField();
        urlCheckBox = new javax.swing.JCheckBox();
        urlTextField = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        lowerCaseExtCheckBox = new javax.swing.JCheckBox();

        setLayout(new java.awt.GridBagLayout());

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("se/trixon/photokml/ui/config/Bundle"); // NOI18N
        maxWidthCheckBox.setText(bundle.getString("ModulePhotoPanel.maxWidthCheckBox.text")); // NOI18N
        maxWidthCheckBox.setPreferredSize(new java.awt.Dimension(100, 18));
        maxWidthCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maxWidthCheckBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 3, 0);
        add(maxWidthCheckBox, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 3, 0);
        add(maxWidthNumericField, gridBagConstraints);

        maxHeightCheckBox.setText(bundle.getString("ModulePhotoPanel.maxHeightCheckBox.text")); // NOI18N
        maxHeightCheckBox.setPreferredSize(new java.awt.Dimension(100, 18));
        maxHeightCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maxHeightCheckBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 3, 0);
        add(maxHeightCheckBox, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 3, 0);
        add(maxHeightNumericField, gridBagConstraints);

        urlCheckBox.setText(bundle.getString("ModulePhotoPanel.urlCheckBox.text")); // NOI18N
        urlCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                urlCheckBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
        add(urlCheckBox, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 3, 0);
        add(urlTextField, gridBagConstraints);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(jPanel1, gridBagConstraints);

        lowerCaseExtCheckBox.setText(bundle.getString("ModulePhotoPanel.lowerCaseExtCheckBox.text")); // NOI18N
        lowerCaseExtCheckBox.setToolTipText(bundle.getString("ModulePhotoPanel.lowerCaseExtCheckBox.toolTipText")); // NOI18N
        lowerCaseExtCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lowerCaseExtCheckBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 3, 0);
        add(lowerCaseExtCheckBox, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void maxWidthCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maxWidthCheckBoxActionPerformed
        maxWidthNumericField.setEnabled(maxWidthCheckBox.isSelected());
        mOptions.setPhotoBalloonMaxWidth(maxWidthCheckBox.isSelected());
    }//GEN-LAST:event_maxWidthCheckBoxActionPerformed

    private void maxHeightCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maxHeightCheckBoxActionPerformed
        maxHeightNumericField.setEnabled(maxHeightCheckBox.isSelected());
        mOptions.setPhotoBalloonMaxHeight(maxHeightCheckBox.isSelected());
    }//GEN-LAST:event_maxHeightCheckBoxActionPerformed

    private void urlCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_urlCheckBoxActionPerformed
        urlTextField.setEnabled(urlCheckBox.isSelected());
        mOptions.setPhotoBaseUrl(urlCheckBox.isSelected());
    }//GEN-LAST:event_urlCheckBoxActionPerformed

    private void lowerCaseExtCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lowerCaseExtCheckBoxActionPerformed
        mOptions.setPhotoForceLowerCaseExtension(lowerCaseExtCheckBox.isSelected());
    }//GEN-LAST:event_lowerCaseExtCheckBoxActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JCheckBox lowerCaseExtCheckBox;
    private javax.swing.JCheckBox maxHeightCheckBox;
    private se.trixon.almond.util.swing.ANumericField maxHeightNumericField;
    private javax.swing.JCheckBox maxWidthCheckBox;
    private se.trixon.almond.util.swing.ANumericField maxWidthNumericField;
    private javax.swing.JCheckBox urlCheckBox;
    private javax.swing.JTextField urlTextField;
    // End of variables declaration//GEN-END:variables

    @Override
    public void load(Profile profile) {
        maxHeightCheckBox.setSelected(mOptions.isPhotoBalloonMaxHeight());
        maxHeightNumericField.setText(String.valueOf(mOptions.getPhotoBalloonMaxHeightValue()));

        maxWidthCheckBox.setSelected(mOptions.isPhotoBalloonMaxWidth());
        maxWidthNumericField.setText(String.valueOf(mOptions.getPhotoBalloonMaxWidthValue()));

        lowerCaseExtCheckBox.setSelected(mOptions.isPhotoForceLowerCaseExtension());

        urlCheckBox.setSelected(mOptions.isPhotoBaseUrl());
        urlTextField.setText(mOptions.getPhotoBaseUrlValue());

        restoreEnabledStates();
    }

    @Override
    public void save(Profile profile) {
    }
}
